@startuml stream_parser
hide empty members
namespace pdfparser {
enum require_type <<Enumeration>> {
	<<Const>>
	+{static} keyword_EOF       : int = 0
	+{static} EOL               : int = 1
	+{static} keyword_startxref : int = 2
	+{static} keyword_xref      : int = 3
	+{static} space             : int = 4
}
enum ignore_flag <<Enumeration>> {
	<<Const, Flag>>
	+{static} none            : uint8_t = 0
	+{static} null            : uint8_t = 1
	+{static} horizontal_tab  : uint8_t = 2
	+{static} line_feed       : uint8_t = 4
	+{static} form_feed       : uint8_t = 8
	+{static} carriage_return : uint8_t = 16
	+{static} space           : uint8_t = 32
	+{static} comment         : uint8_t = 64

	+{static} EOL
	 : uint8_t = line_feed | carriage_return
	+{static} any_whitespace_characters
	 : uint8_t = null | horizontal_tab | line_feed | form_feed | carriage_return | space | EOL
	+{static} any_whitespace_characters_except_EOL
	 : uint8_t = any_whitespace_characters & ~EOL
}
class stream_parser {
	-m_stream : std::ifstream

	+stream_parser<FilenameT>(in filename : const FilenameT&)
	+seek_to_end()                                                : void
	+tell()                                                       : std::streamoff
	+seek(in byte_offset_from_beginning_of_file : std::streamoff) : void
	+seek_forward_head_of_line()                                  : void
	+take_xref_byte_offset()                                      : std::streamoff
	+take_xref_table()                                            : xref_table
	+take_xref_entry(in object_number : object_t)                 : xref_entry
	+take_trailer(inout object_accessor : object_pool&)           : dictionary_object
	+take_any_object(inout object_accessor : object_pool&)        : any_direct_object_or_ref
	+take_indirect_object(inout object_accessor : object_pool&, in object_number : object_t, in generation_number : generation_t) : any_direct_object
	+require(in req_type : require_type)                          : void
	+ignore_if_present(in flags : ignore_flag)                    : void
	+take_signed_integer<IntType>()                               : IntType
	+take_unsigned_integer<IntType>()                             : IntType
}
stream_parser ..> require_type
stream_parser ..> ignore_flag
stream_parser ..> xref_types
stream_parser ..> object_types
stream_parser <..> object_pool
stream_parser ..> syntax_error

annotation xref_types <<(N, yellow) namespace>> {
	[[xref_types.class.pu]]
}
annotation object_types <<(N, yellow) namespace>> {
	[[object_types.class.pu]]
}
class object_pool {
	[[object_pool.class.pu]]
}
class syntax_error {
	[[error_types.class.pu]]
}
}
@enduml
