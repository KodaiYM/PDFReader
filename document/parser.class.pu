@startuml parser
namespace pdfparser {
enum require_type <<Enumeration>> {
	<<Const>>
	+{static} EOF : int = 0
	+{static} EOL : int = 1
	+{static} startxref : int = 2
	+{static} xref : int = 3
	+{static} space : int = 4
}
enum ignore_flags <<Enumeration>> {
	<<Const, Flag>>
	+{static} null : int = 1
	+{static} horizontal_tab : int = 2
	+{static} line_feed : int = 4
	+{static} form_feed : int = 8
	+{static} carriage_return : int = 16
	+{static} space : int = 32
	+{static} comment : int = 64
	+{static} EOL : int = line_feed | carriage_return
	+{static} any_whitespace_characters : int = null | horizontal_tab | line_feed | form_feed | carriage_return | space | EOL
	+{static} any_whitespace_characters_except_EOL : int = any_whitespace_characters & ~EOL
}
class parser {
	-m_stream : std::istream
	-m_xref_byte_offset : decltype(m_stream.tellg())
	-m_xref_table : xref_table

	+parser(inout istr : std::istream&&)
	-take_footer() : void
}
parser x..> syntax_error
parser x..> overflow_or_underflow_error
parser x..> error_code
parser x..> parser_utility
parser x--> "1" xref_table

class parser_utility <<utility>> {
	+enum require_type
	+enum ignore_flags

	+{static} take_xref_byte_offset(inout istr : std::istream&, in object_number : object_t) : decltype(istr.tellg())
	+{static} take_xref_table(inout istr : std::istream&) : xref_table
	+{static} take_xref_entry(inout istr : std::istream&) : xref_entry
	+{static} require(inout istr : std::istream&, in req_type : require_type) : void
	+{static} ignore_if_present(inout istr : std::istream&, in flags : const std::bitset<7>&) : void
	+{static} take_signed_integer<SignedIntType>(inout istr : std::istream&) : SignedIntType
	+{static} take_unsigned_integer<UnsignedIntType>(inout istr : std::istream&) : UnsignedIntType
}
parser_utility x..> require_type
parser_utility x..> ignore_flags
parser_utility x..> syntax_error
parser_utility x..> overflow_or_underflow_error
parser_utility x..> error_code
parser_utility x..> xref_table
parser_utility x..> xref_entry
parser_utility x..> xref_types

enum error_code <<Enumeration>> {
	<<Const>>
	+{static} EOF_not_found : int = 0
	+{static} EOF_invalid : int = 1
	+{static} EOL_not_found : int = 2
	+{static} xref_byte_offset_not_found : int = 3
	+{static} startxref_not_found : int = 4
	+{static} signed_integer_not_found : int = 5
	+{static} unsigned_integer_not_found : int = 6
	+{static} xref_not_found : int = 7
	+{static} space_not_found : int = 8
	+{static} xref_entry_first_10_digits_invalid : int = 9
	+{static} xref_entry_second_5_digits_invalid : int = 10
	+{static} xref_entry_keyword_invalid : int = 11
	+{static} xref_entry_last_2_bytes_invalid : int = 12
}
class syntax_error {
	-m_error_code : error_code

	+syntax_error(in error_code : const error_code&)
	+code() : error_code
}
syntax_error --|> std::runtime_error
syntax_error x--> "1" error_code

class overflow_or_underflow_error {
}
overflow_or_underflow_error --|> std::overflow_error
overflow_or_underflow_error --|> std::underflow_error

class xref_types {
	+{static} object_t : typedef = uint32_t {Const}
	+{static} generation_t : typedef = uint16_t {Const}
	+{static} xref_entry : typedef = std::variant<xref_inuse_entry, xref_free_entry> {Const}
}
class xref_inuse_entry {
	+byte_offset : decltype(std::istream{}.tellg())
}
xref_inuse_entry --|> "private" "std::pair<object_t, generation_t>"
class xref_free_entry {
	+next_free_object_number : object_t
}
xref_free_entry x..> xref_types
xref_free_entry --|> "private" "std::pair<object_t, generation_t>"
class xref_table {
}
xref_table --|> "private" "std::set<xref_entry>"
}
@enduml
