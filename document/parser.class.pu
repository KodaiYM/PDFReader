@startuml parser
namespace pdfparser {
enum require_type <<Enumeration>> {
	<<Const>>
	+{static} EOF : int = 0
	+{static} EOL : int = 1
	+{static} startxref : int = 2
}
enum ignore_flags <<Enumeration>> {
	<<Const, Flag>>
	+{static} null : int = 1
	+{static} horizontal_tab : int = 2
	+{static} line_feed : int = 4
	+{static} form_feed : int = 8
	+{static} carriage_return : int = 16
	+{static} space : int = 32
	+{static} comment : int = 64
	+{static} eol : int = line_feed | carriage_return
	+{static} any_whitespace_characters : int = null | horizontal_tab | line_feed | form_feed | carriage_return | space | eol
	+{static} any_whitespace_characters_except_EOL : int = any_whitespace_characters & ~eol
}
class parser {
	-m_stream : std::istream
	-m_xref_byte_offset : decltype(m_stream.tellg())

	+parser(inout istr : std::istream&&)
	-take_footer() : void
}
parser x..> syntax_error
parser x..> overflow_or_underflow_error
parser x..> error_code
parser x..> parser_utility

class parser_utility <<utility>> {
	+enum require_type
	+enum ignore_flags

	+{static} take_xref_byte_offset(inout istr : std::istream&) : decltype(istr.tellg())
	+{static} require(inout istr : std::istream&, in req_type : require_type) : void
	+{static} ignore_if_present(inout istr : std::istream&, in flags : const std::bitset<7>&) : void
	+{static} take_signed_integer(inout istr : std::istream&) : intmax_t
	+{static} take_unsigned_integer(inout istr : std::istream&) : uintmax_t
}
parser_utility x..> require_type
parser_utility x..> ignore_flags
parser_utility x..> syntax_error
parser_utility x..> overflow_or_underflow_error
parser_utility x..> error_code

enum error_code <<Enumeration>> {
	<<Const>>
	+{static} EOF_not_found : int = 0
	+{static} EOF_invalid : int = 1
	+{static} EOL_not_found : int = 2
	+{static} xref_byte_offset_not_found : int = 3
	+{static} startxref_not_found : int = 4
	+{static} signed_integer_not_found : int = 5
	+{static} unsigned_integer_not_found : int = 6
}
class syntax_error {
	-m_error_code : error_code

	+syntax_error(in error_code : const error_code&)
	+code() : error_code
}
syntax_error --|> std::runtime_error
syntax_error x--> "1" error_code

class overflow_or_underflow_error {
}
overflow_or_underflow_error --|> std::overflow_error
overflow_or_underflow_error --|> std::underflow_error
}
@enduml
