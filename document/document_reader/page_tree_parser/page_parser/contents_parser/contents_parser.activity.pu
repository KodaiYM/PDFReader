@startuml contents_parser
partition "contents_parser(stream : ipdfstream&)" {
start
	:m_content_stream = stream;
stop
}
@enduml

@startuml get_contents
partition "get_contents()" {
start
	:builder : pdfcontents_builder;
	:operands : std::vector<any_direct_object>;
	while (true) is (y)
		:before_take_object_pos = m_content_stream.tell();
		:object = m_content_stream.take_object<any_direct_object>();
		if (object_not_found_error が出た) then (y)
			:m_content_stream.seek(before_take_object_pos);
			:operator_token = m_content_stream.take_token();
			if (!operands.has_value()) then (y)
				break
			endif
			switch (operator_token?)
			case ("q")
				:builder.store_graphics_state();
			case ("Q")
				:builder.restore_graphics_state();
			case ("cm")
				:builder.concat_CTM({operands.at(0), operands.at(1), operands.at(2), operands.at(3), operands.at(4), operands.at(5)});
			case ("d")
				:pattern_array = std::get<array_object>(operands.at(0));
				:pattern_vector = pattern_array to vector<double>;
				:start_phase = number_to_double(std::get<number_object>(operands.at(1)));
				:builder.set_line_dash_pattern({std::move(pattern_vector), std::move(start_phase)});
			case ("i")
				:builder.set_flatness(number_to_double(std::get<number_object>(operands.at(0))));
			case ("j")
				:builder.set_line_join_style(static_cast<line_style::join_type>(std::get<integer_object>(operands.at(0))));
			case ("J")
				:builder.set_line_cap_style(static_cast<line_style::cap_type>(std::get<integer_object>(operands.at(0))));
			case ("M")
				:builder.set_miter_limit(number_to_double(std::get<number_object>(operands.at(0))));
			case ("w")
				:builder.set_line_width(number_to_double(std::get<number_object>(operands.at(0))));
			case ("g")
				:intensity = number_to_double(std::get<number_object>(operands.at(0)));
				:color = chroma::grayscale_color{intensity};
				:builder.set_fill_color(color);
			case ("G")
				:intensity = number_to_double(std::get<number_object>(operands.at(0)));
				:color = chroma::grayscale_color{intensity};
				:builder.set_stroke_color(color);
			case ("k")
				:cyan = number_to_double(std::get<number_object>(operands.at(0)));
				:megenta = number_to_double(std::get<number_object>(operands.at(1)));
				:yellow = number_to_double(std::get<number_object>(operands.at(2)));
				:black = number_to_double(std::get<number_object>(operands.at(3)));
				:color = chroma::cmyk_color{cyan, megenta, yellow, black};
				:builder.set_fill_color(color);
			case ("K")
				:cyan = number_to_double(std::get<number_object>(operands.at(0)));
				:megenta = number_to_double(std::get<number_object>(operands.at(1)));
				:yellow = number_to_double(std::get<number_object>(operands.at(2)));
				:black = number_to_double(std::get<number_object>(operands.at(3)));
				:color = chroma::cmyk_color{cyan, megenta, yellow, black};
				:builder.set_stroke_color(color);
			case ("rg")
				:red = number_to_double(std::get<number_object>(operands.at(0)));
				:green = number_to_double(std::get<number_object>(operands.at(1)));
				:blue = number_to_double(std::get<number_object>(operands.at(2)));
				:color = chroma::rgb_color{red, green, blue};
				:builder.set_fill_color(color);
			case ("RG")
				:red = number_to_double(std::get<number_object>(operands.at(0)));
				:green = number_to_double(std::get<number_object>(operands.at(1)));
				:blue = number_to_double(std::get<number_object>(operands.at(2)));
				:color = chroma::rgb_color{red, green, blue};
				:builder.set_stroke_color(color);
			case ("BT")
				:builder.begin_text();
			case ("Tc")
				:builder.set_character_spacing(number_to_double(std::get<number_object>(operands.at(0))));
			case ("Tf")
				' 未実装
			case ("TL")
				:builder.set_leading(number_to_double(std::get<number_object>(operands.at(0))));
			case ("Tr")
				:builder.set_text_rendering_mode(static_cast<text_style::rendering_mode>(std::get<integer_object>(operands.at(0))));
			case ("Ts")
				:builder.set_text_rise(number_to_double(std::get<number_object>(operands.at(0))));
			case ("Tw")
				:builder.set_word_spacing(number_to_double(std::get<number_object>(operands.at(0))));
			case ("Tz")
				:builder.set_horizontal_scaling(number_to_double(std::get<number_object>(operands.at(0))));
			case ("Td")
				:next_line_offset_x = number_to_double(std::get<number_object>(operands.at(0)));
				:next_line_offset_y = number_to_double(std::get<number_object>(operands.at(1)));
				:builder.concat_text_matrices(next_line_offset_x, next_line_offset_y);
			case ("TD")
				:next_line_offset_x = number_to_double(std::get<number_object>(operands.at(0)));
				:next_line_offset_y = number_to_double(std::get<number_object>(operands.at(1)));
				:builder.set_leading(-next_line_offset_y);
				:builder.concat_text_matrices(next_line_offset_x, next_line_offset_y);
			case ("Tm")
				:next_line_x = number_to_double(std::get<number_object>(operands.at(0)));
				:next_line_y = number_to_double(std::get<number_object>(operands.at(1)));
				:builder.set_text_matrices(next_line_x, next_line_y);
			case ("T*")
				:builder.move_to_next_line();
			case ("ET")
				:builder.end_text();
			case (default)
				:throw document_error();
			endswitch
			:operands.clear();
		else
			:operands.push_back(std::move(object));
		endif
	endwhile
	:return builder.build();
stop
}
@enduml
